{
    "log": [
        "*"
    ],
    "maxFileDescriptors": 250000,
    "databases": {
        "{{ couchbase.bucket }}": {
            "username": "{{ sync_gateway.user }}",
            "bucket": "{{ couchbase.bucket }}",
            "users": {
                "GUEST": {
                    "admin_channels": [
                        "*"
                    ],
                    "disabled": true
                }
            },
            "password": "{{ sync_gateway.password }}",
{% if groups['vmss_couchbase'] | length > 1 %}
                "server": "{{ hostvars[groups['vmss_couchbase'][0]]["ansible_eth0"]["ipv4"]["address"] }},{{ hostvars[groups['vmss_couchbase'][1]]["ansible_eth0"]["ipv4"]["address"] }},{{ hostvars[groups['vmss_couchbase'][2]]["ansible_eth0"]["ipv4"]["address"] }}",
{% else %}
                "server": "{{ hostvars[groups['vmss_couchbase'][0]]["ansible_eth0"]["ipv4"]["address"] }}"
{% endif %}
            "oidc": {
                "default_provider": "microsoft",
                "providers": {
                    "microsoft": {
                        "callback_url": "{{ openid.url }}",
                        "user_prefix": "{{ openid.user_prefix }}",
                        "client_id": "{{ openid.client_id }}",
                        "issuer": "{{ openid.issuer }}",
                        "validation_key": "{{ openid.valkey }}",
                        "register": true,
                        "scope": [
                            "openid",
                            "email",
                            "profile",
                            "offline_access"
                        ]
                    }
                }
            },
            "sync": "/* Released: 2019-Feb-01 09:56:42 */ function (doc, oldDoc) { function isResurrection() { if (!oldDoc) { return false; } return (oldDoc._deleted) ? true : false; } function isCreation() { return (isResurrection() || (!oldDoc)) ? true : false; } function isDeletion() { return (doc._deleted) ? true : false; } function requireAdminRole() { requireRole('admin'); } function requireBrokerRole() { requireRole('broker'); } function requireUwrRole() { requireRole('underwriter'); } function checkReadOnly(name) { var value, oldValue; if (isCreation() || isDeletion()) { return; } value = doc[name]; oldValue = oldDoc[name]; if (value !== oldValue) { requireAdminRole(); /* throw({ forbidden: name + ' is read-only.'}); */ } } function checkUpdateChannelAccess(type) { var channels; if (type === 'CorporateDetail') { checkReadOnly('role'); /* ajc 1 Feb 2019 want admins to be allowed */ try { requireAdminRole(); } catch(error) { if (oldDoc['admins']) { requireAccess(oldDoc['admins']); } } } channels = oldDoc.channels || []; if (type === 'UserSettings') { channels = channels.slice(); channels.push('notif_settings'); } requireAccess(channels); } function getRequiredTextField(name) { var value; value = doc[name]; if ((typeof value) === 'string') { if (value.length !== 0) { return value; } } /* throw({ forbidden: name + ' is required.'}); */ requireAdminRole(); return ''; } function getDocumentTypeName() { var value, oldValue; oldValue = (oldDoc) ? oldDoc['type'] : null; if (isDeletion()) { return oldValue; } value = getRequiredTextField('type'); if ((oldValue) && (oldValue !== value)) { requireAdminRole(); /* throw({ forbidden: 'type is read-only.'} ); */ } return value; } function checkRwPlacing() { var status = doc.control.status; if(status === 'QuotationRequest') { requireBrokerRole(); } if(status === 'QuotedByUnderwriter') { requireUwrRole(); } } function setChannels(typename) { channel(doc.channels); switch (typename) { case 'CorporateDetail': case 'TestCorporateDetail': case 'UserSettings': channel('notif_settings'); break; case 'notification': channel('notif_messages'); break; case 'RWActivity': case 'RWComment': if (doc.apnsData) { channel('notif_messages'); } break; case 'RWAttachQueue': channel('AttachQueue'); break; default: break; } } var type = getDocumentTypeName(); if (isCreation()) { if (type === 'RWPlacing') { checkRwPlacing(); } if (type === 'CorporateDetail') { requireAdminRole(); } setChannels(type); return; } /* ajc & pdm */ if( type === 'RWComment') { throw({ forbidden: 'RWComment documents may not be updated'} ); } checkUpdateChannelAccess(type); setChannels(type); } "
        }
    },
    "interface": "0.0.0.0:4984",
    "adminInterface": "0.0.0.0:4985"
}
