---
# tasks file for roles/whitespace

# Configure Docker
########################################################################

- name: log into private registry and force re-authorization
  docker_login:
    registry: "{{ docker.registry_url }}"
    username: "{{ docker.registry_user }}"
    password: "{{ docker.registry_password }}"
  become_user: "{{ docker.user }}"
  become: true
  tags:
      - "application"

# Create the folders we need
########################################################################

- name: create the working folder
  file:
    path: "{{ app.working_folder }}"
    state: "directory"
    owner: "{{ docker.user }}"
    group: "{{ docker.user }}"
  tags:
      - "application"

- name: create the docker folder
  file:
    path: "{{ app.working_folder }}/docker_{{ app.env }}"
    state: "directory"
    owner: "{{ docker.user }}"
    group: "{{ docker.user }}"
  tags:
      - "application"

# Generate the files we need from the templates
########################################################################

- name: copy the update script
  template:
    src: "{{ templates.update_script }}"
    dest: "{{ app.working_folder }}/update_docker_{{ app.env }}.sh"
    owner: "{{ docker.user }}"
    group: "{{ docker.user }}"
    mode: "744"
  tags:
    - "application"

- name: create the docker-compose.yml file
  template:
    src: "{{ templates.docker_compose }}"
    dest: "{{ app.working_folder }}/docker_{{ app.env }}/docker-compose.yml"
    owner: "{{ docker.user }}"
    group: "{{ docker.user }}"
  tags:
    - "application"

- name : copy sync gateway config
  template:
    src: "{{ templates.sync_gateway }}"
    dest: "/home/{{ sync_gateway.user }}/sync_gateway.json"
    owner: "{{ sync_gateway.user }}"
    group: "{{ sync_gateway.user }}"
  notify: "restart sync_gateway"
  become_user: "{{ sync_gateway.user }}"
  become: true
  tags:
      - "application"

# Pull the images needed
########################################################################

- name: pull the docker images
  docker_image:
    name: "{{ item }}"
  become_user: "{{ docker.user }}"
  become: true
  with_items: "{{ containers }}"
  tags:
      - "application"

# Run Docker Compose and Prune
########################################################################

- name: run docker-compose
  command: "{{ docker.compose_command }}"
  args:
    chdir: "{{ app.working_folder }}/docker_{{ app.env }}"
  become_user: "{{ docker.user }}"
  become: true
  tags:
      - "application"

- name: run docker prune
  command: "{{ docker.prune_command }}"
  args:
    chdir: "{{ app.working_folder }}/docker_{{ app.env }}"
  become_user: "{{ docker.user }}"
  become: true
  tags:
      - "application"

# Copy the NGINX configs
########################################################################

- name: install configuration files
  copy:
    src: "nginx-{{ app.env }}/{{ item }}"
    dest: "/etc/nginx/conf.d/{{ item }}"
    owner: "nginx"
    group: "nginx"
    mode: "0644"
  notify: "restart nginx"
  with_items: "{{ nginx_configs }}"
  tags:
      - "application"

- name: create whereami directory
  file:
    dest:  "{{ nginx.default_whereami_page_dir }}"
    owner: "{{ nginx.user }}"
    group: "{{ nginx.user }}"
    mode: "755"
    state: directory
  tags:
    - "application"

- name: copy the updated index.html to directories
  template:
    src: "{{ templates.index_html }}"
    dest: "{{ item }}/{{ nginx.default_page_file }}"
    owner: "{{ nginx.user }}"
    group: "{{ nginx.user }}"
    mode: "755"
  with_items:
   - "{{ nginx.default_page_dir }}"
   - "{{ nginx.default_whereami_page_dir }}"
  tags:
    - "application"

# Print some information to the screen
########################################################################

- debug:
    msg: "The sync gate way username is '{{ sync_gateway.user }}' and password '{{ sync_gateway.password }}'"
  tags:
      - "application"