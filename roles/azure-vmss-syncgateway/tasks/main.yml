---
# tasks file for roles/azure-vmss-syncgateway

- name: create the public IP address needed for the syncgateway load balancer
  azure_rm_publicipaddress:
    resource_group: "{{ resource_group }}"
    allocation_method: "Static"
    name: "{{ vmss_syncgateway.name }}-lb-pip"
    tags: "{{ common_tags }}"

- name: create a syncgateway load balancer using the public IP above
  azure_rm_loadbalancer:
    resource_group: "{{ resource_group }}"
    name: "{{ vmss_syncgateway.name }}-lb"
    frontend_ip_configurations:
      - name: "{{ vmss_syncgateway.name }}-lb-frontend-ip-config"
        public_ip_address: "{{ vmss_syncgateway.name }}-lb-pip"
    backend_address_pools:
      - name: "{{ vmss_syncgateway.name }}-lb-backend-address-pool"
    probes:
      - name: "{{ vmss_syncgateway.name }}-lb-probe"
        port: "22"
        fail_count: "3"
        protocol: "Tcp"
    inbound_nat_pools:
      - name: "{{ vmss_syncgateway.name }}-nat-ssh"
        frontend_ip_configuration_name: "{{ vmss_syncgateway.name }}-lb-frontend-ip-config"
        protocol: "Tcp"
        frontend_port_range_start: "2220"
        frontend_port_range_end: "2229"
        backend_port: "22"
      - name: "{{ vmss_syncgateway.name }}-nat-admin-ui-ssl"
        frontend_ip_configuration_name: "{{ vmss_syncgateway.name }}-lb-frontend-ip-config"
        protocol: "Tcp"
        frontend_port_range_start: "18200"
        frontend_port_range_end: "18205"
        backend_port: "18100"
    tags: "{{ common_tags }}"

- name: check the user {{ ansible_user_id }} has a key, if not create one
  user:
    name: "{{ ansible_user_id }}"
    generate_ssh_key: yes
    ssh_key_file: "~/.ssh/id_rsa"

- name: create the syncgateway VMSS
  azure_rm_virtualmachinescaleset:
    resource_group: "{{ resource_group }}"
    name: "{{ vmss_syncgateway.name }}-vmss"
    short_hostname: "{{ vmss_syncgateway.short_name }}"
    vm_size: "{{ vmss_syncgateway.size }}"
    capacity: "{{ vmss_syncgateway.capacity }}"
    overprovision: "no"
    virtual_network_name: "{{ network.name }}"
    subnet_name: "{{ vmss_syncgateway.subnet_name }}"
    load_balancer: "{{ vmss_syncgateway.name }}-lb"
    security_group: "{{ vmss_syncgateway.name }}-nsg"
    admin_username: "{{ vmss_syncgateway.admin_username }}"
    ssh_password_enabled: "{{ vmss_syncgateway.key.ssh_password_enabled }}"
    ssh_public_keys:
      - path: "{{ vmss_syncgateway.key.path }}"
        key_data: "{{ vmss_syncgateway.key.data }}"
    image:
      offer: "{{ vmss_syncgateway.image.offer }}"
      publisher: "{{ vmss_syncgateway.image.publisher }}"
      sku: "{{ vmss_syncgateway.image.sku }}"
      version: "{{ vmss_syncgateway.image.version }}"
    managed_disk_type: "{{ vmss_syncgateway.disk.managed_disk_type }}"
    upgrade_policy: "{{ vmss_syncgateway.upgrade_policy }}"
    tags: "{{ common_tags }}"

- name: install syncgateway VMSS extension
  azure_rm_virtualmachinescalesetextension:
    name: "{{ vmss_syncgateway.name }}-syncgateway-vmss-ext"
    resource_group: "{{ resource_group }}"
    vmss_name: "{{ vmss_syncgateway.name }}-vmss"
    publisher: "Microsoft.Azure.Extensions"
    type: "CustomScript"
    type_handler_version: "2.0"
    settings: '{ "fileUris": [ "https://{{ storage.name }}{{ the_hash }}.blob.core.windows.net/{{ storage.container }}/syncGateway.sh", "https://{{ storage.name }}{{ the_hash }}.blob.core.windows.net/{{ storage.container }}/util.sh" ], "commandToExecute": "bash syncGateway.sh {{ sync_gateway.version }}" }'
    auto_upgrade_minor_version: true

- name: create the public IP address needed for the syncgateway application gateway
  azure_rm_publicipaddress:
    resource_group: "{{ resource_group }}"
    allocation_method: "Dynamic"
    name: "{{ vmss_syncgateway.name }}-agw-pip"
    tags: "{{ common_tags }}"
  when: '"yes" in configure_application_gateway'

- name: get info about the subnet
  azure_rm_resource_facts:
    api_version: '2019-04-01'
    resource_group: "{{ resource_group }}"
    provider: "network"
    resource_type: "virtualnetworks"
    resource_name: "{{ network.name }}"
    subresource:
      - type: subnets
        name: "{{ vmss_syncgateway.subnet_name_agw }}"
  register: agw_subnet
  when: '"yes" in configure_application_gateway'

- name: gather some facts on the NICs attached to the VMs in the virtual machine scale set
  azure_rm_resource_facts:
    api_version: '2018-04-01'
    resource_group: "{{ resource_group }}"
    provider: "compute"
    resource_type: "virtualmachinescalesets"
    resource_name: "{{ vmss_syncgateway.name }}-vmss"
    subresource:
      - type: "networkInterfaces"
  register: vmss_network_interfaces
  when: '"yes" in configure_application_gateway'

- name: set the local path for the dynamic rules
  set_fact:
    local_path: "./group_vars/dynamic_rules_{{ vmss_syncgateway.name }}_backend_rules.yml"

- name: create the dynamic backend rules
  template:
    src: "backend.j2"
    dest: "{{ local_path }}"

- name: load dynamic security group rules
  include_vars: "{{ local_path }}"
  
- debug: msg="{{ dyn_back_end_address_pool }}"

- name: create a syncgateway application gateway using the public IP above
  azure_rm_appgateway:
    resource_group: "{{ resource_group }}"
    name: "{{ vmss_syncgateway.name }}-agw"
    sku:
      name: "{{ vmss_syncgateway.application_gateway.sku.name }}"
      tier: "{{ vmss_syncgateway.application_gateway.sku.tier }}"
      capacity: "{{ vmss_syncgateway.capacity }}"
    gateway_ip_configurations:
      - subnet:
          id: "{{ agw_subnet.response[0].id }}"
        name: "{{ vmss_syncgateway.name }}-agw-ip-config"
    frontend_ip_configurations:
      - public_ip_address: "{{ vmss_syncgateway.name }}-agw-pip"
        name:  "{{ vmss_syncgateway.name }}-agw-frontend-ip"
    frontend_ports:
      - port: "80"
        name: "{{ vmss_syncgateway.name }}-agw-frontend-80"
      - port: "443"
        name: "{{ vmss_syncgateway.name }}-agw-frontend-443"
    backend_address_pools: "{{ dyn_back_end_address_pool }}"
      #- backend_addresses:          
      #  - ip_address: "10.30.0.7"
      #  - ip_address: "10.30.0.8"  
      #  name: "wp-sandbox-sg-agw-backend-pool"
    backend_http_settings_collection:
      - port: "80"
        protocol: http
        cookie_based_affinity: "disabled"
        name: "{{ vmss_syncgateway.name }}-agw-backend-settings-80"
      - port: "443"
        protocol: https
        cookie_based_affinity: "disabled"
        name: "{{ vmss_syncgateway.name }}-agw-backend-settings-443"
    http_listeners:
      - frontend_ip_configuration: "{{ vmss_syncgateway.name }}-agw-frontend-ip"
        frontend_port: "{{ vmss_syncgateway.name }}-agw-frontend-80"
        name: "{{ vmss_syncgateway.name }}-agw-listener-80"
      - frontend_ip_configuration: "{{ vmss_syncgateway.name }}-agw-frontend-ip"
        frontend_port: "{{ vmss_syncgateway.name }}-agw-frontend-443"
        name: "{{ vmss_syncgateway.name }}-agw-listener-443"
        protocol: https
        ssl_certificate: "{{ ssl_cert_name }}"
    request_routing_rules:
      - rule_type: "Basic"
        backend_address_pool: "{{ vmss_syncgateway.name }}-agw-backend-pool"
        backend_http_settings: "{{ vmss_syncgateway.name }}-agw-backend-settings-80"
        http_listener: "{{ vmss_syncgateway.name }}-agw-listener-80"
        name: "{{ vmss_syncgateway.name }}-agw-rule-80"
      - rule_type: "Basic"
        backend_address_pool: "{{ vmss_syncgateway.name }}-agw-backend-pool"
        backend_http_settings: "{{ vmss_syncgateway.name }}-agw-backend-settings-443"
        http_listener: "{{ vmss_syncgateway.name }}-agw-listener-443"
        name: "{{ vmss_syncgateway.name }}-agw-rule-443"
    ssl_policy:
      policy_type: "{{ ssl_policy_type }}"
      policy_name: "{{ ssl_policy_name }}"
      cipher_suites: "{{ ssl_policy_cypher_suites }}"
      disabled_ssl_protocols: "{{ ssl_policy_disabled_protocols }}"
      min_protocol_version: "{{ ssl_policy_min_protocol }}"
    ssl_certificates:
      - data: "{{ ssl_cert_body }}"
        name: "{{ ssl_cert_name }}"
        password: "{{ ssl_cert_pass }}"
    authentication_certificates:
      - data: "{{ self_signed_cert_data }}"
        name: "{{ self_signed_cert_name }}"
    probes:
      - name: "{{ vmss_syncgateway.name }}-hp-1"
        protocol: 'https'
        host: 'whitespace.co.uk'
        path: '/api/test'
        timeout: 30
      - name: "{{ vmss_syncgateway.name }}-hp-2"
        protocol: 'https'
        host: 'whitespace.co.uk'
        path: '/sync/'
        timeout: 30
    tags: "{{ common_tags }}"
  when: '"yes" in configure_application_gateway'

- name: gather facts about resource
  azure_rm_resource_facts:
    resource_group: "{{ resource_group }}"
    resource_name: "{{ vmss_couchbase.name }}-awg"
    resource_type: "applicationgateway"
  register: agw_facts
  when: '"yes" in configure_application_gateway'

- name: create a syncgateway application gateway using the public IP above
  azure_rm_appgateway:
    resource_group: "{{ resource_group }}"
    name: "{{ vmss_syncgateway.name }}-agw"
    sku:
      name: "{{ vmss_syncgateway.application_gateway.sku.name }}"
      tier: "{{ vmss_syncgateway.application_gateway.sku.tier }}"
      capacity: "{{ vmss_syncgateway.capacity }}"
    gateway_ip_configurations:
      - subnet:
          id: "{{ agw_subnet.response[0].id }}"
        name: "{{ vmss_syncgateway.name }}-agw-ip-config"
    frontend_ip_configurations:
      - public_ip_address: "{{ vmss_syncgateway.name }}-agw-pip"
        name:  "{{ vmss_syncgateway.name }}-agw-frontend-ip"
    frontend_ports:
      - port: "80"
        name: "{{ vmss_syncgateway.name }}-agw-frontend-80"
      - port: "443"
        name: "{{ vmss_syncgateway.name }}-agw-frontend-443"
    backend_address_pools: "{{ dyn_back_end_address_pool }}"                                  
    #- backend_addresses:          
    #    - ip_address: "10.30.0.7"
    #    - ip_address: "10.30.0.8"  
    #  name: "wp-sandbox-sg-agw-backend-pool"
    backend_http_settings_collection:
      - port: "80"
        protocol: http
        cookie_based_affinity: "disabled"
        name: "{{ vmss_syncgateway.name }}-agw-backend-settings-80"
      - port: "443"
        protocol: https
        cookie_based_affinity: "disabled"
        name: "{{ vmss_syncgateway.name }}-agw-backend-settings-443"
        authentication_certificates:
          - name: "{{ self_signed_cert_name }}"
            id: "{{ agw_facts.url }}/providers/Microsoft.Network/applicationGateways/{{ vmss_syncgateway.name }}-agw/authenticationCertificates/{{ self_signed_cert_name }}"
    http_listeners:
      - frontend_ip_configuration: "{{ vmss_syncgateway.name }}-agw-frontend-ip"
        frontend_port: "{{ vmss_syncgateway.name }}-agw-frontend-80"
        name: "{{ vmss_syncgateway.name }}-agw-listener-80"
      - frontend_ip_configuration: "{{ vmss_syncgateway.name }}-agw-frontend-ip"
        frontend_port: "{{ vmss_syncgateway.name }}-agw-frontend-443"
        name: "{{ vmss_syncgateway.name }}-agw-listener-443"
        protocol: https
        ssl_certificate: "{{ ssl_cert_name }}"
    request_routing_rules:
      - rule_type: "Basic"
        backend_address_pool: "{{ vmss_syncgateway.name }}-agw-backend-pool"
        backend_http_settings: "{{ vmss_syncgateway.name }}-agw-backend-settings-80"
        http_listener: "{{ vmss_syncgateway.name }}-agw-listener-80"
        name: "{{ vmss_syncgateway.name }}-agw-rule-80"
      - rule_type: "Basic"
        backend_address_pool: "{{ vmss_syncgateway.name }}-agw-backend-pool"
        backend_http_settings: "{{ vmss_syncgateway.name }}-agw-backend-settings-443"
        http_listener: "{{ vmss_syncgateway.name }}-agw-listener-443"
        name: "{{ vmss_syncgateway.name }}-agw-rule-443"
    ssl_policy:
      policy_type: "{{ ssl_policy_type }}"
      policy_name: "{{ ssl_policy_name }}"
      cipher_suites: "{{ ssl_policy_cypher_suites }}"
      disabled_ssl_protocols: "{{ ssl_policy_disabled_protocols }}"
      min_protocol_version: "{{ ssl_policy_min_protocol }}"
    ssl_certificates:
      - data: "{{ ssl_cert_body }}"
        name: "{{ ssl_cert_name }}"
        password: "{{ ssl_cert_pass }}"
    authentication_certificates:
      - data: "{{ self_signed_cert_data }}"
        name: "{{ self_signed_cert_name }}"
    probes:
      - name: "{{ vmss_syncgateway.name }}-hp-1"
        protocol: 'https'
        host: 'whitespace.co.uk'
        path: '/api/test'
        timeout: 30
      - name: "{{ vmss_syncgateway.name }}-hp-2"
        protocol: 'https'
        host: 'whitespace.co.uk'
        path: '/sync/'
        timeout: 30
    tags: "{{ common_tags }}"
  when: '"yes" in configure_application_gateway'